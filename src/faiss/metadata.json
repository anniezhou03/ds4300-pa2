["Paris is the capital of france", "1/6/25: Introduction \u25cf\u200b need to install: \u25cb\u200b docker desktop \u25cb\u200b anaconda or miniconda python \u25cb\u200b datagrip or dbeaver \u25cb\u200b VS code for python development (3.10 or higher) \u25cb\u200b ability to interact with git and github \u25cf\u200b should review \u25cb\u200b shell cmds \u25cb\u200b docker and docker compose \u25a0\u200b whats a container, whats an image, volume, mapping \u25cf\u200b make an aws account 1/8/25: Foundations \u25cf\u200b baseline efficiency is linear search \u25cb\u200b start at beginning of list and progress from the first element to the last element until you find what youre looking for or get to the last element \u25cf\u200b record: a collection of values \u25cb\u200b ex. a row in a table \u25cf\u200b collection: set of records of the same entity type \u25cb\u200b ex. a table \u25cf\u200b search key: a value for an attribute from the entity type \u25cb\u200b ex. >1 \u25cf\u200b need n * x bytes of memory \u25cb\u200b each record takes up x bytes \u25cb\u200b n is the number of records \u25cf\u200b contiguously allocated list (array) \u25cb\u200b all n*x bytes are allocated as a single chunk of memory \u25cf\u200b linked list \u25cb\u200b each record needs x bytes + additional space for 1 or 2 memory addresses \u25cb\u200b takes up a bit more space \u25cb\u200b need some way to know if you are at the front of the list \u25cf\u200b arrays vs linked list pros and cons \u25cb\u200b arrays are faster for random access but slow for inserting anywhere but the end \u25cb\u200b linked lists are faster for inserting anywhere in the list, but slower for random access \u25cf\u200b binary search: cut in half each time and figure out which half target is in \u25cb\u200b has to be sorted \u25cb\u200b input: array of values in sorted order, target value \u25cb\u200b output: the location (index) of where target is located or some", "the list, but slower for random access \u25cf\u200b binary search: cut in half each time and figure out which half target is in \u25cb\u200b has to be sorted \u25cb\u200b input: array of values in sorted order, target value \u25cb\u200b output: the location (index) of where target is located or some value indicating target was not found \u25cb\u200b usually recursive", "\u25a0\u200b can be dangerous if you have a huge dataset \u25cf\u200b time complexity \u25cb\u200b linear search \u25a0\u200b best case: O(1) \u25a0\u200b worst case: O(n) \u25cb\u200b binary search for an array (contiguously allocated list) \u25a0\u200b best case: O(1) \u25a0\u200b worst case: O(log2n) \u25a0\u200b super inefficient on a linked list \u25cf\u200b database searching \u25cb\u200b problem: can only efficiently search a table buy the primary key (since it is the only sorted column) \u25cb\u200b we need an external data structure to support faster searching than a linear scan \u25cb\u200b solution: database index \u25cf\u200b binary search tree \u25cb\u200b has fast insert like a linked list and fast search like an array \u25cb\u200b every node in the left subtree is less than its parent and every node in the right subtree is greater than its parent 1/9/25 \u25cf\u200b 1/16/25 \u25cf\u200b need to recursively descend to find all the files?? \u25cf\u200b OOP in python \u25cb\u200b constructor \u25cb\u200b add_value function appends value to a list \u25cb\u200b consider duplicates using a set object \u25cb\u200b abstract method: if a class implements this method, then implementations of the class also need the method \u25cb\u200b pickle it def _rotate_left(self, x: AVLNode) -> AVLNode: \u200b T2 = y.left \u200b \u200b y.left = x \u200b x.right = T2 \u200b \u200b ht_x_left = (0 if not x.left else x.left.height) \u200b ht_x_right = (0 if not x.right else x.right.height) \u200b x.height = 1 + (ht_x_left if ( ht_x_left > \u200b", "1/27/25: Moving Beyond the Relational Model \u25cf\u200b benefits of the relational model \u25cb\u200b mostly standard data model and query language \u25cb\u200b ACID compliance \u25cb\u200b works well with highly structured and large amounts of data \u25cf\u200b ACID properties \u25cb\u200b atomicity \u25cb\u200b consistency \u25cb\u200b isolation \u25cb\u200b durability 2/19/25: Intro to the Graph Data Model \u25cf\u200b graph database \u25cb\u200b data model based on the graph data structure \u25cb\u200b composed of nodes and edges \u25cf\u200b types of graphs \u25cb\u200b connected (vs unconnected) \u25a0\u200b for every pair of nodes, there is a path \u25cb\u200b weighted (vs unweighted) \u25a0\u200b edge has a weight property \u25cb\u200b directed (vs undirected) \u25a0\u200b edges define a start and end node \u25cb\u200b acyclic (vs cyclic) \u25a0\u200b graph contains no cycles practical \u25cf\u200b pip install pymupdf \u25cf\u200b ollama pull mistral:latest", "CS 3200 The Relational Model of Data Mark Fontenot, PhD Northeastern University These notes are based upon and adapted via the generosity of Prof. Nate Derbinsky.", "Reminders - Make sure you can see the course on Gradescope, Campuswire, and Slack - Mini HW00 - Early EC Deadline: Sunday @ 11:59 pm - Regular Deadline: Tuesday @ 11:59 pm 2", "Applications and Data \u25cf Many applications are data intensive compared to compute intensive. \u25cf Many apps need to\u2026 \u25cb store data for itself or another app to use in the future (databases) \u25cb remember the results of prior expensive operations (caches) \u25cb allow users to search for data e\ufb03ciently (indexes) \u25cb send messages with data to another application to handle (stream processing) \u25cb periodically process a large accumulation of data (batch processing) From Kleppmann, Designing Data Intensive Applications, O\u2019Reilly, 2017. 3", "Stores of data? 4", "What is a database? \u25cfStructured collection of related data \u25cbusually related to something in the real world \u25cbusually created\u2026 \u25a0 for a speci\ufb01c group of users \u25a0 to help these users perform some kind of tasks \u25a0 to hopefully complete those tasks with some performance, redundancy, concurrency, and/or security considerations in mind 5", "Notion \u25cfIntended users? \u25cfIntended tasks? \u25cfConsiderations of \u25cbPerformance? \u25cbConcurrency? \u25cbRedundancy? \u25cbSecurity? 6", "Database Management Systems (DBMS) \u25cfSoftware that allow the creation and maintenance of databases \u25cbSupport the encoding of some type of structure for the data \u25cbPersists the data \u25cbSupport adding new data and updating existing data \u25cbProtects against failures and unauthorized access 7", "Some Categories of DBMSs Document-Oriented Databases - Organizes and queries data based on the concept of a \u201cdocument\u201d often in JSON - usually considered semi-structured Graph Databases - Organizes data by nodes, edges, labels - Query about paths between nodes and node relationships 8", "Some Categories of DBMSs Key-Value Databases - Everything is a key/value pair - Based on associative array Spatial Databases - Stores data related to 2D/3D locations - Query example: are 2 cars about to collide? 9", "Some Categories of DBMSs Vector Databases - unit of storage is a vector represent high-dimensional data - highly performant similarity searches - used extensively in LLMs 10", "The category for this course\u2026 \u25cfRelational Database Management Systems \u25cbBased on storing data in tables and connections between those tables \u25cbOriginal concept developed in early 70s by EF Codd and colleagues 11", "Relational Model of Data: Overview 12", "The Relational Database: Relation/Table Image borrowed from this Medium post. Students Relation/Table Name Attributes/Columns Rows/ Tuples 13 Relation - the core construct in a relational database; collection of tuples with each tuple having values for a \ufb01xed number of attributes/\ufb01elds. Relation Schema - represents the attributes and their data types for a particular relation Relation Instance - represents the state of the data in the relation at a particular point in time. Row/Tuple - values for each relation\u2019s attribute for one element of a relation instance ID Name Phone Dorm Age GPA 1123141 Mark 555-1234 1 19 3.21 2323411 Kim 555-9876 2 25 3.53 17642352 Sam 555-6758 1 19 3.25 Primary Key", "The Relational Database: Constraints Image borrowed from this Medium post. cannot be null Must be a valid dorm id in the dorm relation Example Constraints: 14 Constraint - conditions that must hold on all valid relation instances Types: - Key Constraints - Entity Integrity Constraints - Referential Integrity constraints ID Name Phone Dorm Age GPA 1123141 Mark 555-1234 1 19 3.21 2323411 Kim 555-9876 2 25 3.53 17642352 Sam 555-6758 1 19 3.25 Student", "The Relational Database: Relationships Name ID Phone Dorm Age GPA Mark 1123141 555-1234 1 19 3.21 Kim 2323411 555-9876 2 25 3.53 Sam 17642352 555-6758 1 19 3.25 Dorm Name 1 555 Huntington 2 Baker ID Class 1123141 COMP355 2323411 COMP355 17642352 MATH650 1123141 MATH650 2323411 BIOL110 Student Dorm Class Some values in one table are related (by design) to values in another table 15 Referential Integrity Constraint Examples", "The Relational Database: Queries Name ID Phone Dorm Age GPA Mark 1123141 555-1234 1 19 3.21 Kim 2323411 555-9876 2 25 3.53 Sam 17642352 555-6758 1 19 3.25 Dorm Name 1 555 Huntington 2 Baker ID Class 1123141 COMP355 2323411 COMP355 17642352 MATH650 1123141 MATH650 2323411 BIOL110 Student Dorm Class Questions (Queries): \u201cProvide a list of student names and IDs with GPA between 3.0 and 3.5.\u201d 16", "The Relational Database: Queries Name ID Phone Dorm Age GPA Mark 1123141 555-1234 1 19 3.21 Kim 2323411 555-9876 2 25 3.53 Sam 17642352 555-6758 1 19 3.25 Dorm Name 1 555 Huntington 2 Baker ID Class 1123141 COMP355 2323411 COMP355 17642352 MATH650 1123141 MATH650 2323411 BIOL110 Student Dorm Class 17 Questions (Queries): \u201cWhich students live in Baker Dorm?\u201d", "Databases in the Context of a Software System Database Tier Application Tier Client Tier 18", "The Relational Model of Data: Digging In 19", "History 101 Codd, Edgar F. \"A relational model of data for large shared data banks.\" Communications of the ACM 13.6 (1970): 377-387. 20 \u201cFuture users of large data banks must be protected from having to know how the data is organized in the machine (the internal representation)\u2026\u201d", "History 101 \u25cfThe relational model provides a formal mathematical basis for the structure of and interaction with a relational database \u25cb Based on set theory and \ufb01rst-order predicate logic \u25cb The formal basis allows for robust scienti\ufb01c development of the model. \u25cfThe (eternal) struggle of theory vs. practice\u2026 \u25cb Most modern RDBMSs don\u2019t strictly adhere to the purest mathematical formalisms in the relational model. 21", "A Little Set Theory Review\u2026 \u25cfWhat\u2019s a set? \u25cfWhat is the cardinality of a set? (denoted |S|) 22 A set is a collection of unique objects. The things (objects) inside a set are called elements. cardinality \u2192 the number of unique elements in the set. What are some examples of sets? ?", "A Little Set Theory Review\u2026 \u25cfWhat is the Union of sets A and B (A \u22c3 B)? \u25cfWhat is the intersection of sets A and B (A \u2229 B)? \u25cfWhat is the set di\ufb00erence of A and B (A - B)? 23 A = {1, 3, 5} B = {3, 4, 5, 6} AUB = {1, 3, 5, 4, 6} A\u22c2B = {3, 5} A-B = {1}", "A Little Set Theory Review\u2026 \u25cfWhat is the cartesian product of two sets? A = {123, 435} B = {Chul, Kev, Sal} \u25cfWhat is the cartesian product of A and B (aka A x B)? 24 AXB = { (123, Chul), (123, Kev), (123, Sal), (435, Chul), (435, Kev), (435, Sal) } The cartesian product of two sets A and B is the set of all ordered pairs (a, b) where a \u2208 A and b \u2208 B.", "What\u2019s a Relational Database? \u25cfA Relational Database consists of \u25cb a collection of relations, and \u25cb a collection of constraints. \u25cfA relational database is in a valid/consistent state if it satis\ufb01es all constraints (else, invalid/inconsistent state). 25", "Relations (Some Review) \u25cfA relation consists of \u25cb its schema \u2192 a description of the structure of the relation (relation schema) \u25cb its state \u2192 the current data that is populated in the relation (relation instance) \u25cfThe schema of a relation includes \u25cb the name of the relation \u25cb an list of n attributes each with an associated domain (what values that attribute can take on). \u25cfNotation: REL_NAME(Attrib1:Dom1, Attrib2:Dom2\u2026) 26", "More formally\u2026 \u25cfLet A1, A2, \u2026, An be names of attributes of relation R with associated domains D1, D2, \u2026, Dn, then R(A1:D1, A2:D2,...An:Dn) is a relation schema and n, the degree of R, represents the number of attributes of R. \u25cfThen, an instance of Relation R is a subset of the cartesian product of the domains of the attributes of R. 27", "Relations - Example - Assume we have the following domains: - names \u2192 {\u2018Jared\u2019, \u2018Sakshi\u2019} - id_nums \u2192 {all 9 digit positive integers starting with 00} - majors \u2192 {\u2018CS\u2019, \u2018DS\u2019, \u2018CY\u2019} - De\ufb01ning the TA relation schema: TA(name: names, id: id_nums, major: majors) 28 Is the following a valid instance of TA? { (\u2018Jared\u2019, 001928374, \u2018CS\u2019) (\u2018Sakshi\u2019, 001122334, \u2018DS\u2019) } ?", "Relations - Example - Assume we have the following domains: - names \u2192 {\u2018Jared\u2019, \u2018Sakshi\u2019} - id_nums \u2192 {all 9 digit positive integers starting with 00} - majors \u2192 {\u2018CS\u2019, \u2018DS\u2019, \u2018CY\u2019} - De\ufb01ning the TA relation schema: TA(name: names, id: id_nums, major: majors) 29 Is the following a valid instance of TA? { (\u2018Sakshi\u2019, 001928374, \u2018CS\u2019) (\u2018Sakshi\u2019, 001122334, \u2018CY\u2019) } ?", "Relations - Example - Assume we have the following domains: - names \u2192 {\u2018Jared\u2019, \u2018Sakshi\u2019} - id_nums \u2192 {all 9 digit positive integers starting with 00} - majors \u2192 {\u2018CS\u2019, \u2018DS\u2019, \u2018CY\u2019} - De\ufb01ning the TA relation schema: TA(name: names, id: id_nums, major: majors) 30 Is the following a valid instance of TA? { (\u2018Sakshi\u2019, 001928374, \u2018CS\u2019) (\u2018Dylan\u2019, 001122334, \u2018DS\u2019) } ?", "Relations - Example - Assume we have the following domains: - names \u2192 {\u2018Jared\u2019, \u2018Sakshi\u2019} - id_nums \u2192 {all 9 digit positive integers starting with 00} - majors \u2192 {\u2018CS\u2019, \u2018DS\u2019, \u2018CY\u2019} - De\ufb01ning the TA relation schema: TA(name: names, id: id_nums, major: majors) 31 Is the following a valid instance of TA? { (\u2018Sakshi\u2019, 001928374, \u2018CS\u2019) (\u2018Jared\u2019, 001122334) } ?", "Relation Instance \u25cfA relation instance is a set of tuples (rows) from a relation at a particular point in time. \u25cfEach tuple (row) is an ordered sequence of values, one for each attribute (possibly null) \u25cb usually enclosed in < and > 32 Name ID Phone Dorm Age GPA Mark 1123141 555-1234 1 19 3.21 Kim 2323411 555-9876 2 25 3.53 Sam 17642352 555-6758 1 19 3.25 Student 1 Tuple", "Null Value \u25cf Null is a special value that may exist in the domain of an attribute \u25cf Could mean di\ufb00erent things \u25cb value unknown \u25cb value unavailable right now \u25cb attribute doesn\u2019t apply to this tuple \u25cf Does NOT mean: \u25cb zero (0) \u25cb the empty string (\u2018\u2019) \u25cf (NULL != NULL) Comparing two values of NULL does NOT return true 33", "Value of an Attr in a Tuple \u25cfValues should be atomic \u25cb Say NO to composite attributes (ex: address that includes city, state and zip) \u25cb Say NO to multi-valued attributes (ex: all email addresses for 1 person) 34 Name ID Address Phone Dorm Age GPA Mark 1123141 121 Anystreet Boston MA 02212 555-1234 555-1876 1 19 3.21 Kim 2323411 235 Huntington Boston MA 02215 555-9876 2 25 3.53 Student", "Super and Candidate Keys - key - a subset of attributes of a relation used to uniquely identify each tuple - A super key of a relation R is a subset of the attributes of R such that no two distinct tuples in any possible relation instance will have the same values for the subset of attributes. - may not be minimal - could contain attributes that aren\u2019t needed for unique determination - A candidate key of relation r is a minimal super key. - A relation may have more than one candidate keys. 35", "Keys - Superkey Some Possible Superkeys: (customerNumber, customerName) (customerNumber, salesRepEmployeeNumber) (customerNumber) Not Minimal Minimal Customers 36", "Keys - Candidate Keys Some Possible Superkeys: (customerNumber, customerName) (customerNumber, salesRepEmployeeNumber) (customerNumber) Not Candidate Keys Candidate Key Customers 37", "The Primary Key - The primary key (PK) of relation R is chosen from the set of candidate keys - If a relation has only 1 candidate key, it becomes the PK. - If a relation has > 1 candidate key, the database designer chooses one based on business requirements - Every relation must have a PK - Entity Integrity Constraint \u2192 PK values must be unique and may NOT be null - (Usually) the PK is underlined in a relation schema or table 38", "Keys - Primary Key Some Possible Superkeys: (customerNumber, customerName) (customerNumber, salesRepEmployeeNumber) (customerNumber) Chosen as Primary Key If there are 2+ Candidate Keys, DB Designer will choose one as the Primary key Customers 39", "Foreign Keys \u25cf Foreign Key (FK) - An attribute ai in one relation RC (the child relation) refers to/references the PK aj in another relation RP (parent relation) such that all values of ai must either be NULL or contain a value from aj. \u25cf Self-Referential Relation \u2192 RC and RP are the same relation \u25cf Foreign Key == Referential Integrity Constraint \u25cf Foreign Keys are the operationalization of relationships in a relational database 40", "Foreign Key Example 41 Students cID sID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades sID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Parent Relation Child Relation (the one being referenced) (the one referencing another relation) Primary Keys Foreign Key Note: in this example, Grades.sID cannot contain null values because it is part of the PK of Grades Relation.", "FKs - but why??? Customers Notice: empLast, empFirst, and empEmail attributes contain duplicated/repeated data. Opens up the possibility of insert or update anomalies. So, put them in a separate table along with empNum and refer back to the new table (becomes the parent table) 42", "Relational Algebra 43", "Relational Algebra \u25cfRelational Algebra (RA) : a procedural query language for relations that allow us to retrieve information from a relational database \u25cb A query is an operation or set of operations applied to one or more relation instances \u25cb RA is closed, meaning the result/output of each query is another relation \u25cb In RA, order of operations matters \u25cfNot a full-\ufb02edged (turing complete) programming language 44", "Quick Aside: Predicate Functions - Predicate functions - functions that return true or false. - We will use predicate functions (or just \u201cpredicates\u201d) to determine if tuples in a relation instance should be returned by a query or not. - in the form attr <op> attr OR attr <op> <constant> - <op> can be any standard relational operator (=, !=, <, >, <=, etc) - predicates can be composed with ^ (and), v (or), \u3131 (not). empID firstName 333 Bob 143 Sam Employees Examples: - empID = 143 - empID > 400 - firstName = \u2018Bob\u2019 ^ empID = 333 45", "The First 8 Basic Operations of RA 1. Select \u03c3 (Tuple Filtering) 2. Project \u03c0 (Attribute Filtering) 3. Rename \u03c1 4. Cartesian Product \u2715 5. Join \u2a1d 6. Intersection \u22c2 7. Set-di\ufb00erence \u2013 8. Union U 46 Highest Precedence Lowest Precedence You can always use ( ) to change the order of operations. Often times, ( ) make things more clear.", "Relational Algebra: Select Operator \u25cfSelect - return a relation containing tuples from relation R that satisfy predicate pred. Notation: \u25cfThink of it as a horizontal subset (subset of tuples/rows) of a relation instance 47", "Relational Algebra: Select Operator 48 Dept Class Enrollment CS 3200 40 CS 2500 643 CS 1800 680 DS 2000 412 Enrollments Dept Class Enrollment CS 2500 643 CS 1800 680 Enrollments Result:", "Relational Algebra: Select Operator 49 Dept Class Taught_by CS 3200 CS CS 2500 CS CS 1800 Math DS 2000 Math Enrollments Dept Class Taught_by CS 3200 CS Enrollments Result:", "Relational Algebra: Project Operator Project - returns a relation with a subset of attributes (A1\u2026 Ak) from R. Notation: Duplicate tuples will be removed from the resulting relation (because relations are sets). 50", "Relational Algebra: Project Operator 51 Dept Class Enrollment CS 3200 40 CS 2500 643 CS 1800 680 DS 2000 412 Enrollments Dept Class CS 3200 CS 2500 CS 1800 DS 2000 Enrollments Dept CS DS Enrollments Result: Result:", "Relational Algebra: Cartesian Product Same operation from set theory. 52 Attr_1 Attr_2 123 abc 456 def R Attr_1 Attr_3 123 CS 789 DS 111 Cyber S R.Attr_1 R.Attr_2 S.Attr_1 S.Attr_3 123 abc 123 CS 123 abc 789 DS 123 abc 111 Cyber 456 def 123 CS 456 def 789 DS 456 def 111 Cyber Note: we can always use Relation.Attribute notation to resolve naming collisions. Relations can\u2019t have two attributes with the same name", "Union, Intersection & Difference \u25cfEssentially the same as what we know from set theory. \u25cfOne small di\ufb00erence: relations must be schema compatible \u25cb same number of attributes \u25cb attributes\u2019 domains must be compatible 53", "More Complex RA Expressions 54 - Simple RA expression can be composed into more complex expressions - Remember: output of each RA operation is another relation", "Relational Algebra: Temporary Relation Names For more complex RA queries, you can have: \u25cf one long query expression \u25cf an ordered list of smaller expressions, the result of each is given a temporary name with the \u2190 operator Example: \u25cf TEMP_NAME \u2190 TEMP_NAME can then be used as a relation in subsequent steps of the same query. \u25cf Be careful about attribute naming collisions 55", "Relational Algebra: Rename Operator Rename Operator (rho) \u2013 Allows us to \u201crename\u201d a relation, the attributes of a relation, or both. - If only name is provided, the relation is being renamed (all attributes retain their original name.) - List of attributes in parentheses means renaming attributes, but not relation (assume attributes originally (employeeID, lastName, \ufb01rstName) - Rename both. 56", "Developing Relational Algebra Expressions 57", "Writing RA Queries - Sometimes we need to evaluate an RA query against a database instance - Result is usually another relation instance/set of tuples/table - Other times we need to convert the narrative form of a query into a RA query - Example: \u201cProvide a list of all info from the Employee relation where the empID is less than 400.\u201d - Answer: 58", "Writing RA Queries 59 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades Next few examples use this database schema.", "Writing RA Queries 60 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades Write a RA query that returns the names of all students.", "Writing RA Queries 61 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades Provide a list of all course numbers taught by the CS Department.", "Writing RA Queries 62 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades List all 2nd year student names.", "Writing RA Queries 63 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades What course or courses (dept and number) are taught by Professor Norris?", "Writing RA Queries 64 Stu_ID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Cou_ID Dept Number Prof 332 CS 3345 Lawrimore 221 CS 2341 Fontenot 535 MATH 2339 Norris Students Courses C_ID S_ID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades List the letter grades that Sam has earned (don\u2019t need to include course info). or", "Joining Data from Two Relations 65", "Relational Algebra: The Join Operator \u25cfJoin - allows us to combine data from two relations. \u25cb Subset of the cartesian product of the two argument relations based on explicit or implicit join predicate. \u25cf2 Versions: \u25cb Natural Join - Join relations on attributes with the same name \u25cb Theta Join (or condition join or simply Join) - Join relations with explicitly supplied join predicate 66", "Natural Join \u25cfGiven: A(R, S, T, U, V) and B(S, V, W, X) \u25cfQuery: \u25cfNotice: A and B both have attributes named S & V. \u25cfResult: \u25cb Schema of resulting relation is where attr(R) returns a set containing the attributes of R - so, attributes used in the implicit join condition are not duplicated in the result \u25cb contains any tuple from A x B where values for attributes S and V are equal \u25cb If A & B have no common attribute names, result is A X B. 67", "Example 68 Students cID sID Grade 332 234 B 332 332 A 535 336 C 221 134 A 535 332 C 221 332 A 221 336 B Grades sID Name Year 134 Chul 1 234 Kev 3 332 Sam 2 336 Ashwin 2 Query: cID sID Grade Name Year 332 234 B Kev 3 332 332 A Sam 2 535 336 C Ashwin 2 221 134 A Chul 1 535 332 C Sam 2 221 332 A Sam 2 221 336 B Ashwin 2 Result:", "theta-Join (or Join\u2026 or Condition(al) Join) \u25cf Operator has an explicit join predicate (condition) (doesn\u2019t rely upon attribute names) \u25cf Result is a subset of the cartesian product where provided predicate holds true \u25cf Assume: S(sID, name) and G(stu-ID, course, semester, grade) \u25cf Query: \u25cf Result: \u25cb Relation with schema (sID, name, stu-ID, course, semester, grade) \u25cb all tuples where S.sID = G.stu-ID \u25cf Note: join condition can use other operators besides =. 69", "theta-Join (or Join\u2026 or Condition(al) Join) A B 1 Cat 2 Dog 3 Bird C D 1 Meow 3 Chirp S T A B 1 Cat 3 Bird C D 1 Meow 3 Chirp 70", "New: Entity Relationship Diagram 71 Northwind Traders Data Model - sample database model that has been around for years; originally developed by Microsoft - represents data model for fake Northwind Traders company, an importer/exporter of specialty foods", "New: ER Diagram 72 Relation Name Attributes Primary Key Attributes Relationships", "Relations in Northwind \u25cfSuppliers: Suppliers and vendors of Northwind \u25cfCustomers: Customers who buy products from Northwind \u25cfEmployees: Employee details of Northwind traders \u25cfProducts: Product information \u25cfShippers: The details of the shippers who ship the products from the traders to the end-customers \u25cfOrders and Order_Details: Sales Order transactions taking place between the customers & the company \u25cfCategories: The categories a product can fall into 73", "For each of the following, compose a relational algebra query that satis\ufb01es the query prompt. Practice Time! 74", "Query Time! 75 1. For each supplier, provide its name, contact person, and phone number.", "Query Time! 76 2. Which products are supplied by FoodsRUs? Please include the product name and unit price.", "Query Time! 77 3. Provide a list of all product names ordered by World Market (a customer\u2019s name).", "Query Time! 78 4. Which customers has employee Sam Johnson worked with? Provide the complete customer information. (CustomerID)", "Further Reading \u25cfHarrington Ch5 (OReilly) \u25cfFoundations of Computer Science - Ch 8 - The Relational Model 79"]